version: "3.7"

services:
  ipharm-app:
    image: conceptica/ipharm_app:test
    container_name: ipharm-app
    restart: unless-stopped
    depends_on:
      - ipharm-postgres
    env_file: &envs-ipharm-app
      - .envs/.production/.ipharm_app
      - .envs/.production/.ipharm_postgres
      - .envs/.production/.ipharm_redis
    logging: &logging
      driver: "json-file"
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    command: scripts/start_production.sh
    volumes:
      - ./ipharm_static:/app/static
      - ./ipharm_media:/app/media

  ipharm-worker:
    image: conceptica/ipharm_app:test
    container_name: ipharm-worker
    restart: unless-stopped
    depends_on:
      - ipharm-postgres
      - ipharm-redis
      - ipharm-app
    env_file: *envs-ipharm-app
    logging: *logging
    command: scripts/start_worker.sh
    volumes:
      - ./ipharm_media:/app/media

  ipharm-beat:
    image: conceptica/ipharm_app:test
    container_name: ipharm-beat
    restart: unless-stopped
    depends_on:
      - ipharm-postgres
      - ipharm-redis
      - ipharm-app
    env_file: *envs-ipharm-app
    logging: *logging
    command: scripts/start_beat.sh

  ipharm-postgres:
    image: postgres:13.4-alpine
    container_name: ipharm-postgres
    restart: unless-stopped
    env_file:
      - .envs/.production/.ipharm_postgres
    logging: *logging
    volumes:
      - ./_postgres_data_ipharm:/var/lib/postgresql/data

  ipharm-redis:
    image: redis:6.2-alpine
    container_name: ipharm_redis
    restart: unless-stopped
    logging: *logging

  ipharm-flower:
    image: mher/flower
    container_name: ipharm-flower
    restart: unless-stopped
    env_file:
      - .envs/.production/.ipharm_redis
    logging: *logging
    depends_on:
      - ipharm-redis

  iciselniky-app:
    image: conceptica/iciselniky_app:test
    container_name: iciselniky-app
    restart: unless-stopped
    depends_on:
      - iciselniky-postgres
    env_file: &envs-iciselniky-app
      - .envs/.production/.iciselniky_app
      - .envs/.production/.iciselniky_postgres
      - .envs/.production/.iciselniky_redis
    logging: *logging
    command: scripts/start_production.sh
    volumes: &volumes-iciselniky-app
      - ./iciselniky_static:/app/static

  iciselniky-postgres:
    image: postgres:13.4-alpine
    container_name: iciselniky-postgres
    restart: unless-stopped
    logging: *logging
    env_file:
      - .envs/.production/.iciselniky_postgres
    volumes:
      - ./_postgres_data_iciselniky:/var/lib/postgresql/data

  iciselniky-worker:
    image: conceptica/iciselniky_app:test
    container_name: iciselniky-worker
    restart: unless-stopped
    volumes: *volumes-iciselniky-app
    depends_on:
      - iciselniky-postgres
      - iciselniky-redis
      - iciselniky-app
    env_file: *envs-iciselniky-app
    logging: *logging
    command: scripts/start_worker.sh

  iciselniky-beat:
    image: conceptica/iciselniky_app:test
    container_name: iciselniky-beat
    restart: unless-stopped
    volumes: *volumes-iciselniky-app
    depends_on:
      - iciselniky-postgres
      - iciselniky-redis
      - iciselniky-app
    env_file: *envs-iciselniky-app
    logging: *logging
    command: scripts/start_beat.sh

  iciselniky-redis:
    image: redis:6.2-alpine
    container_name: iciselniky_redis
    restart: unless-stopped
    logging: *logging

  iciselniky-flower:
    image: mher/flower
    container_name: iciselniky-flower
    restart: unless-stopped
    env_file:
      - .envs/.production/.iciselniky_redis
    logging: *logging
    depends_on:
      - iciselniky-redis

  ipharm-frontend-app:
    image: conceptica/ipharm_fe_app:test
    container_name: ipharm-frontend-app
    command: cp -r ./build /frontend
    logging: *logging
    volumes:
      - ./frontend_ipharm:/frontend

  izadanky-app:
    image: conceptica/izadanky_app:test
    container_name: izadanky-app
    restart: unless-stopped
    depends_on:
      - izadanky-postgres
    env_file: &envs-izadanky-app
      - .envs/.production/.izadanky_app
      - .envs/.production/.izadanky_postgres
      - .envs/.production/.izadanky_redis
    logging: *logging
    command: scripts/start_production.sh
    volumes: &volumes-izadanky-app
      - ./izadanky_static:/app/static

  izadanky-postgres:
    image: postgres:13.4-alpine
    container_name: izadanky-postgres
    restart: unless-stopped
    logging: *logging
    env_file:
      - .envs/.production/.izadanky_postgres
    volumes:
      - ./_postgres_data_izadanky:/var/lib/postgresql/data

  izadanky-worker-high-priority:
    image: conceptica/izadanky_app:test
    container_name: izadanky-worker-high-priority
    restart: unless-stopped
    volumes: *volumes-izadanky-app
    depends_on:
      - izadanky-postgres
      - izadanky-redis
      - izadanky-app
    env_file: *envs-izadanky-app
    logging: *logging
    command: scripts/start_worker.sh -Q high_priority -n high_priority

  izadanky-worker-low-priority:
    image: conceptica/izadanky_app:test
    container_name: izadanky-worker-low-priority
    restart: unless-stopped
    volumes: *volumes-izadanky-app
    depends_on:
      - izadanky-postgres
      - izadanky-redis
      - izadanky-app
    env_file: *envs-izadanky-app
    logging: *logging
    command: scripts/start_worker.sh -Q low_priority -n low_priority

  izadanky-beat:
    image: conceptica/izadanky_app:test
    container_name: izadanky-beat
    restart: unless-stopped
    volumes: *volumes-izadanky-app
    depends_on:
      - izadanky-postgres
      - izadanky-redis
      - izadanky-app
    env_file: *envs-izadanky-app
    logging: *logging
    command: scripts/start_beat.sh

  izadanky-redis:
    image: redis:6.2-alpine
    container_name: izadanky_redis
    restart: unless-stopped
    logging: *logging

  izadanky-flower:
    image: mher/flower
    container_name: izadanky-flower
    restart: unless-stopped
    env_file:
      - .envs/.production/.izadanky_redis
    logging: *logging
    depends_on:
      - izadanky-redis

#  izadanky-frontend-app:
#    image: conceptica/izadanky_fe_app:test
#    container_name: izadanky-frontend-app
#    command: cp -r ./build /frontend
#    logging: *logging
#    volumes:
#      - ./frontend_izadanky:/frontend_izadanky

  nginx:
    image: nginx
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx-config.conf:/etc/nginx/templates/default.conf.template
      - ./ipharm_static:/ipharm_static
      - ./ipharm_media:/ipharm_media
      - ./iciselniky_static:/iciselniky_static
      - ./izadanky_static:/izadanky_static
      - ./frontend_ipharm/:/frontend_ipharm
#      - ./frontend_izadanky/:/frontend_izadanky
    env_file:
      - .envs/.production/.nginx
    ports:
      - 80:80
      - 3000:3000
      - 5555:5555
    logging: *logging
    depends_on:
      - ipharm-app
      - iciselniky-app
      - izadanky-app
      - ipharm-frontend-app
#      - izadanky-frontend-app

  promtail:
    image: grafana/promtail:2.4.2
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./config/promtail-config.yml:/mnt/config/promtail-config.yml
      - /var/lib/docker/containers:/host/containers
    command: -config.file /mnt/config/promtail-config.yml
    depends_on:
      - loki

  loki:
    image: grafana/loki:2.4.2
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_storage:/var/lib/grafana
    env_file:
      - .envs/.production/.grafana

volumes:
  grafana_storage:
  loki_data: